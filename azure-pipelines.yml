
trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: InstallAndSetup
    displayName: 'Install Dependencies and Setup Azure ML Environment'
    steps:
      - task: UsePythonVersion@0
        displayName: 'Install Python 3.12'
        inputs:
          versionSpec: '3.12.4'
          addToPath: true
          architecture: 'x64'

      - task: Bash@3
        displayName: 'Create and Activate Virtual Environment'
        inputs:
          targetType: 'inline'
          script: |
            # Create a virtual environment
            python -m venv venv
            
            # Activate the virtual environment
            source venv/bin/activate
            
            # Upgrade pip in the virtual environment
            pip install --upgrade pip
            
            # Install dependencies
            pip install streamlit transformers torch 

      - task: Bash@3
        displayName: 'Fix Azure ML SDK ImportError'
        inputs:
          targetType: 'inline'
          script: |
            # Activate the virtual environment
            source venv/bin/activate

            # Locate utils.py in the Azure ML SDK installation
            UTILS_FILE=$(find venv -type f -name "utils.py" | grep "azureml/_base_sdk_common")
            
            # Replace 'from collections import Iterable' with 'from collections.abc import Iterable'
            if [ -f "$UTILS_FILE" ]; then
              sed -i "s/from collections import Iterable/from collections.abc import Iterable/g" "$UTILS_FILE"
              echo "Fixed ImportError in $UTILS_FILE"
            else
              echo "utils.py file not found in the expected location"
            fi

      - task: AzureCLI@2
        inputs:
          azureSubscription: 'nlp_cicd'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Ensure the correct version of the Azure ML extension is installed
            source venv/bin/activate
            az extension remove -n azure-cli-ml || true
            az extension add -n ml --version=2.25.0 --allow-preview


      - task: AzureCLI@2
        inputs:
          azureSubscription: 'nlp_cicd'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Create the Azure ML Workspace
            source venv/bin/activate
            az ml workspace create \
              --resource-group $(ml.resourceGroup) \
              --name $(ml.workspace) \
              --location $(ml.region)


      - task: AzureCLI@2
        inputs:
          azureSubscription: 'nlp_cicd'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Create Compute Target
            source venv/bin/activate
            az ml compute create \
              --name $(ml.computeName) \
              --type amlcompute \
              --resource-group $(ml.resourceGroup) \
              --workspace-name $(ml.workspace) \
              --size $(ml.computeVMSize)


      - task: AzureCLI@2
        inputs:
          azureSubscription: 'nlp_cicd'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            source venv/bin/activate
            az ml job list \
              -g $(ml.resourceGroup) \
              -w $(ml.workspace)


      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            source venv/bin/activate
            streamlit run app2.py \
              --experiment_name $(ml.experimentName) \
              --container_name cicd_transformers \
              --artifact_loc ./outputs/models/


      - task: AzureCLI@2
        inputs:
          azureSubscription: 'nlp_cicd'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            source venv/bin/activate
            az ml model create \
              -g $(ml.resourceGroup) \
              -w $(ml.workspace) \
              --name transformer_cicd \
              --path ./outputs/models/ \
              --tag "model"="Transformer"


      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          Contents: |
            app2.py
            requirements.txt


      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'PipelineArtifacts'





